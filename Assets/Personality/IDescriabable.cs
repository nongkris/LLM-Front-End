using UnityEngine;

/// <summary>
/// Interface for agents leveraging LLMs to generate spoken dialogue and 
/// actions based on text prompts generated by their surroundings.
/// </summary>
public interface IDescribable
{
    /// <summary>
    /// Gets the name of the object or Character.
    /// </summary>
    /// <returns>
    /// Describable's name.
    /// </returns>
    public string GetName();

    /// <summary>
    /// Generates a prompt describing the describable agent's state.
    /// </summary>
    /// <param name="caller">
    /// Who or what is requesting the Descriable to describe itself.
    /// </param>
    /// <returns>
    /// A self description.
    /// </returns>
    public string DescribeSelfForOther(Personality caller);

    /// <summary>
    /// Interacts with the Describable, generates a text description of the
    /// interaction, in addtion to some action taken by the Describable.
    /// </summary>
    /// <param name="interactor">
    /// The Character interacting with the Describable. 
    /// </param>
    /// <returns>
    /// Description of interaction.
    /// </returns>
    //public string Interact(Character interactor);

    /// <summary>
    /// Who are you?
    /// </summary>
    /// <returns></returns>
    //public string Who();

    /// <summary>
    /// Where are you?
    /// </summary>
    /// <returns>Where the Describable is.</returns>
    //public Vector3 Where();

    /// <summary>
    /// Gets a reply to a given question on the Describable's state.
    /// </summary>
    /// <param name="question">
    /// Question to ask the Describable.
    /// </param>
    /// <returns>
    /// The question's answer.
    /// </returns>
    //public string Why(Character whosAsking, string question);

    /// <summary>
    /// WHether the Descriable is printing debug messages to console.
    /// </summary>
    /// <returns>
    /// Describable verbosity.
    /// </returns>
    public bool IsVerbose();
    

}